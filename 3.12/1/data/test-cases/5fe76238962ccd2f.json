{"uid":"5fe76238962ccd2f","name":"Validate Council Output [MiltonKeynesCityCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"a25fa98d985c8b6a2dc69b98eb9662d1","time":{"start":1722956723318,"stop":1722956724331,"duration":1013},"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'find_all'","statusTrace":"fixturefunc = <function scrape_step at 0x7ff7806b9f80>\nrequest = <FixtureRequest for <Function test_scenario_outline[MiltonKeynesCityCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7ff7817cea20>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <MiltonKeynesCityCouncil.CouncilClass object at 0x7ff780325a90>\npage = <Response [200]>\nkwargs = {'council_module_str': 'MiltonKeynesCityCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\ndata = {'bins': []}, estate = 'Fullers Slade'\nsoup = <!DOCTYPE html>\n\n<html dir=\"ltr\" lang=\"en\">\n<head>\n<meta charset=\"utf-8\"/>\n<script async=\"\" src=\"https://www.googletag...0BG0dNTlK_ofnJcPosnSkjCAzC7KXiLa2MGGE90nvkFG20sn_BMHQUhRRg3zBRXbsBVKm_z1DKDYn3k-EwegXw50wQk\"></script>\n</body>\n</html>\n\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        data = {\"bins\": []}\n    \n        # Get the estate from the UPRN field\n        estate = kwargs.get(\"uprn\")\n    \n        # Parse the council's website\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n    \n        # Get a list of lists of estates and their collection days, then check for a match on estate name\n        collection_days = [\n            item.text.strip().replace(\"\\xa0\", \" \").split(\" - \")\n            for item in soup.find(\n                \"div\",\n                {\n                    \"class\": \"field field--name-localgov-paragraphs field--type-entity-reference-revisions field--label-hidden field__items\"\n                },\n>           ).find_all(\"li\")\n        ]\nE       AttributeError: 'NoneType' object has no attribute 'find_all'\n\nuk_bin_collection/uk_bin_collection/councils/MiltonKeynesCityCouncil.py:32: AttributeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"AttributeError: 'NoneType' object has no attribute 'find_all'","statusTrace":"fixturefunc = <function scrape_step at 0x7ff7806b9f80>\nrequest = <FixtureRequest for <Function test_scenario_outline[MiltonKeynesCityCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7ff7817cea20>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:82: in get_and_parse_data\n    bin_data_dict = self.parse_data(page, url=address_url, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <MiltonKeynesCityCouncil.CouncilClass object at 0x7ff780325a90>\npage = <Response [200]>\nkwargs = {'council_module_str': 'MiltonKeynesCityCouncil', 'dev_mode': False, 'headless': True, 'local_browser': False, ...}\ndata = {'bins': []}, estate = 'Fullers Slade'\nsoup = <!DOCTYPE html>\n\n<html dir=\"ltr\" lang=\"en\">\n<head>\n<meta charset=\"utf-8\"/>\n<script async=\"\" src=\"https://www.googletag...0BG0dNTlK_ofnJcPosnSkjCAzC7KXiLa2MGGE90nvkFG20sn_BMHQUhRRg3zBRXbsBVKm_z1DKDYn3k-EwegXw50wQk\"></script>\n</body>\n</html>\n\n\n    def parse_data(self, page: str, **kwargs) -> dict:\n        data = {\"bins\": []}\n    \n        # Get the estate from the UPRN field\n        estate = kwargs.get(\"uprn\")\n    \n        # Parse the council's website\n        soup = BeautifulSoup(page.text, features=\"html.parser\")\n        soup.prettify()\n    \n        # Get a list of lists of estates and their collection days, then check for a match on estate name\n        collection_days = [\n            item.text.strip().replace(\"\\xa0\", \" \").split(\" - \")\n            for item in soup.find(\n                \"div\",\n                {\n                    \"class\": \"field field--name-localgov-paragraphs field--type-entity-reference-revisions field--label-hidden field__items\"\n                },\n>           ).find_all(\"li\")\n        ]\nE       AttributeError: 'NoneType' object has no attribute 'find_all'\n\nuk_bin_collection/uk_bin_collection/councils/MiltonKeynesCityCouncil.py:32: AttributeError","steps":[{"name":"Given the council","time":{"start":1722956723318,"stop":1722956723318,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1722956723318,"stop":1722956724331,"duration":1013},"status":"failed","statusMessage":"'NoneType' object has no attribute 'find_all'","statusTrace":"AttributeError: 'NoneType' object has no attribute 'find_all'\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"f19d571c9b7ab89e","name":"stdout","source":"f19d571c9b7ab89e.txt","type":"text/plain","size":50}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az735-773"},{"name":"thread","value":"2673-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"MiltonKeynesCityCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"5fe76238962ccd2f.json","parameterValues":["MiltonKeynesCityCouncil"]}