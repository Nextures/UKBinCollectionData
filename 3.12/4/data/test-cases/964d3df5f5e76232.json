{"uid":"964d3df5f5e76232","name":"Validate Council Output [SouthKestevenDistrictCouncil]","fullName":"features/validate_council_outputs.feature:Validate Council Output","historyId":"2a7001e5e46e0082211a729ea73e7cc2","time":{"start":1722999049578,"stop":1722999207803,"duration":158225},"status":"failed","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome-headless-shell=127.0.6533.72)\nStacktrace:\n#0 0x55af2baa56ba <unknown>\n#1 0x55af2b775730 <unknown>\n#2 0x55af2b76d761 <unknown>\n#3 0x55af2b75d8f9 <unknown>\n#4 0x55af2b75f684 <unknown>\n#5 0x55af2b75dbc5 <unknown>\n#6 0x55af2b75d426 <unknown>\n#7 0x55af2b75d31e <unknown>\n#8 0x55af2b75b64c <unknown>\n#9 0x55af2b75b9ca <unknown>\n#10 0x55af2b778051 <unknown>\n#11 0x55af2b806cc5 <unknown>\n#12 0x55af2b7e7a52 <unknown>\n#13 0x55af2b8061ca <unknown>\n#14 0x55af2b7e77f3 <unknown>\n#15 0x55af2b7b7ec9 <unknown>\n#16 0x55af2b7b891e <unknown>\n#17 0x55af2ba6b9eb <unknown>\n#18 0x55af2ba6f972 <unknown>\n#19 0x55af2ba58e15 <unknown>\n#20 0x55af2ba70502 <unknown>\n#21 0x55af2ba3dd2f <unknown>\n#22 0x55af2ba94578 <unknown>\n#23 0x55af2ba94750 <unknown>\n#24 0x55af2baa448c <unknown>\n#25 0x7f7132a8ea94 <unknown>\n#26 0x7f7132b1ba34 __clone","statusTrace":"fixturefunc = <function scrape_step at 0x7f527d1c2700>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthKestevenDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f527e8d6d50>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/SouthKestevenDistrictCouncil.py:75: in parse_data\n    driver.get(page)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f527bdbe810>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_TIMED_OUT\\\\n...unknown>\\\\n#24 0x55af2baa448c \\\\u003Cunknown>\\\\n#25 0x7f7132a8ea94 \\\\u003Cunknown>\\\\n#26 0x7f7132b1ba34 __clone\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\nE         (Session info: chrome-headless-shell=127.0.6533.72)\nE       Stacktrace:\nE       #0 0x55af2baa56ba <unknown>\nE       #1 0x55af2b775730 <unknown>\nE       #2 0x55af2b76d761 <unknown>\nE       #3 0x55af2b75d8f9 <unknown>\nE       #4 0x55af2b75f684 <unknown>\nE       #5 0x55af2b75dbc5 <unknown>\nE       #6 0x55af2b75d426 <unknown>\nE       #7 0x55af2b75d31e <unknown>\nE       #8 0x55af2b75b64c <unknown>\nE       #9 0x55af2b75b9ca <unknown>\nE       #10 0x55af2b778051 <unknown>\nE       #11 0x55af2b806cc5 <unknown>\nE       #12 0x55af2b7e7a52 <unknown>\nE       #13 0x55af2b8061ca <unknown>\nE       #14 0x55af2b7e77f3 <unknown>\nE       #15 0x55af2b7b7ec9 <unknown>\nE       #16 0x55af2b7b891e <unknown>\nE       #17 0x55af2ba6b9eb <unknown>\nE       #18 0x55af2ba6f972 <unknown>\nE       #19 0x55af2ba58e15 <unknown>\nE       #20 0x55af2ba70502 <unknown>\nE       #21 0x55af2ba3dd2f <unknown>\nE       #22 0x55af2ba94578 <unknown>\nE       #23 0x55af2ba94750 <unknown>\nE       #24 0x55af2baa448c <unknown>\nE       #25 0x7f7132a8ea94 <unknown>\nE       #26 0x7f7132b1ba34 __clone\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"failed","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome-headless-shell=127.0.6533.72)\nStacktrace:\n#0 0x55af2baa56ba <unknown>\n#1 0x55af2b775730 <unknown>\n#2 0x55af2b76d761 <unknown>\n#3 0x55af2b75d8f9 <unknown>\n#4 0x55af2b75f684 <unknown>\n#5 0x55af2b75dbc5 <unknown>\n#6 0x55af2b75d426 <unknown>\n#7 0x55af2b75d31e <unknown>\n#8 0x55af2b75b64c <unknown>\n#9 0x55af2b75b9ca <unknown>\n#10 0x55af2b778051 <unknown>\n#11 0x55af2b806cc5 <unknown>\n#12 0x55af2b7e7a52 <unknown>\n#13 0x55af2b8061ca <unknown>\n#14 0x55af2b7e77f3 <unknown>\n#15 0x55af2b7b7ec9 <unknown>\n#16 0x55af2b7b891e <unknown>\n#17 0x55af2ba6b9eb <unknown>\n#18 0x55af2ba6f972 <unknown>\n#19 0x55af2ba58e15 <unknown>\n#20 0x55af2ba70502 <unknown>\n#21 0x55af2ba3dd2f <unknown>\n#22 0x55af2ba94578 <unknown>\n#23 0x55af2ba94750 <unknown>\n#24 0x55af2baa448c <unknown>\n#25 0x7f7132a8ea94 <unknown>\n#26 0x7f7132b1ba34 __clone","statusTrace":"fixturefunc = <function scrape_step at 0x7f527d1c2700>\nrequest = <FixtureRequest for <Function test_scenario_outline[SouthKestevenDistrictCouncil]>>\nkwargs = {'context': <test_validate_council.Context object at 0x7f527e8d6d50>, 'headless_mode': 'True', 'local_browser': 'False', 'selenium_url': 'http://localhost:4444'}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/_pytest/fixtures.py:897: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nuk_bin_collection/tests/step_defs/test_validate_council.py:100: in scrape_step\n    context.parse_result = CollectData.run()\nuk_bin_collection/uk_bin_collection/collect_data.py:101: in run\n    return self.client_code(\nuk_bin_collection/uk_bin_collection/collect_data.py:121: in client_code\n    return get_bin_data_class.template_method(address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:61: in template_method\n    bin_data_dict = self.get_and_parse_data(this_url, **kwargs)\nuk_bin_collection/uk_bin_collection/get_bin_data.py:84: in get_and_parse_data\n    bin_data_dict = self.parse_data(\"\", url=address_url, **kwargs)\nuk_bin_collection/uk_bin_collection/councils/SouthKestevenDistrictCouncil.py:75: in parse_data\n    driver.get(page)\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:363: in get\n    self.execute(Command.GET, {\"url\": url})\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f527bdbe810>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_TIMED_OUT\\\\n...unknown>\\\\n#24 0x55af2baa448c \\\\u003Cunknown>\\\\n#25 0x7f7132a8ea94 \\\\u003Cunknown>\\\\n#26 0x7f7132b1ba34 __clone\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\nE         (Session info: chrome-headless-shell=127.0.6533.72)\nE       Stacktrace:\nE       #0 0x55af2baa56ba <unknown>\nE       #1 0x55af2b775730 <unknown>\nE       #2 0x55af2b76d761 <unknown>\nE       #3 0x55af2b75d8f9 <unknown>\nE       #4 0x55af2b75f684 <unknown>\nE       #5 0x55af2b75dbc5 <unknown>\nE       #6 0x55af2b75d426 <unknown>\nE       #7 0x55af2b75d31e <unknown>\nE       #8 0x55af2b75b64c <unknown>\nE       #9 0x55af2b75b9ca <unknown>\nE       #10 0x55af2b778051 <unknown>\nE       #11 0x55af2b806cc5 <unknown>\nE       #12 0x55af2b7e7a52 <unknown>\nE       #13 0x55af2b8061ca <unknown>\nE       #14 0x55af2b7e77f3 <unknown>\nE       #15 0x55af2b7b7ec9 <unknown>\nE       #16 0x55af2b7b891e <unknown>\nE       #17 0x55af2ba6b9eb <unknown>\nE       #18 0x55af2ba6f972 <unknown>\nE       #19 0x55af2ba58e15 <unknown>\nE       #20 0x55af2ba70502 <unknown>\nE       #21 0x55af2ba3dd2f <unknown>\nE       #22 0x55af2ba94578 <unknown>\nE       #23 0x55af2ba94750 <unknown>\nE       #24 0x55af2baa448c <unknown>\nE       #25 0x7f7132a8ea94 <unknown>\nE       #26 0x7f7132b1ba34 __clone\n\n../../../.cache/pypoetry/virtualenvs/uk-bin-collection-EwS6Gn8s-py3.12/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: WebDriverException","steps":[{"name":"Given the council","time":{"start":1722999049578,"stop":1722999049579,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"When we scrape the data from the council","time":{"start":1722999049579,"stop":1722999207803,"duration":158224},"status":"failed","statusMessage":"Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome-headless-shell=127.0.6533.72)\nStacktrace:\n#0 0x55af2baa56ba <unknown>\n#1 0x55af2b775730 <unknown>\n#2 0x55af2b76d761 <unknown>\n#3 0x55af2b75d8f9 <unknown>\n#4 0x55af2b75f684 <unknown>\n#5 0x55af2b75dbc5 <unknown>\n#6 0x55af2b75d426 <unknown>\n#7 0x55af2b75d31e <unknown>\n#8 0x55af2b75b64c <unknown>\n#9 0x55af2b75b9ca <unknown>\n#10 0x55af2b778051 <unknown>\n#11 0x55af2b806cc5 <unknown>\n#12 0x55af2b7e7a52 <unknown>\n#13 0x55af2b8061ca <unknown>\n#14 0x55af2b7e77f3 <unknown>\n#15 0x55af2b7b7ec9 <unknown>\n#16 0x55af2b7b891e <unknown>\n#17 0x55af2ba6b9eb <unknown>\n#18 0x55af2ba6f972 <unknown>\n#19 0x55af2ba58e15 <unknown>\n#20 0x55af2ba70502 <unknown>\n#21 0x55af2ba3dd2f <unknown>\n#22 0x55af2ba94578 <unknown>\n#23 0x55af2ba94750 <unknown>\n#24 0x55af2baa448c <unknown>\n#25 0x7f7132a8ea94 <unknown>\n#26 0x7f7132b1ba34 __clone\n","statusTrace":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome-headless-shell=127.0.6533.72)\nStacktrace:\n#0 0x55af2baa56ba <unknown>\n#1 0x55af2b775730 <unknown>\n#2 0x55af2b76d761 <unknown>\n#3 0x55af2b75d8f9 <unknown>\n#4 0x55af2b75f684 <unknown>\n#5 0x55af2b75dbc5 <unknown>\n#6 0x55af2b75d426 <unknown>\n#7 0x55af2b75d31e <unknown>\n#8 0x55af2b75b64c <unknown>\n#9 0x55af2b75b9ca <unknown>\n#10 0x55af2b778051 <unknown>\n#11 0x55af2b806cc5 <unknown>\n#12 0x55af2b7e7a52 <unknown>\n#13 0x55af2b8061ca <unknown>\n#14 0x55af2b7e77f3 <unknown>\n#15 0x55af2b7b7ec9 <unknown>\n#16 0x55af2b7b891e <unknown>\n#17 0x55af2ba6b9eb <unknown>\n#18 0x55af2ba6f972 <unknown>\n#19 0x55af2ba58e15 <unknown>\n#20 0x55af2ba70502 <unknown>\n#21 0x55af2ba3dd2f <unknown>\n#22 0x55af2ba94578 <unknown>\n#23 0x55af2ba94750 <unknown>\n#24 0x55af2baa448c <unknown>\n#25 0x7f7132a8ea94 <unknown>\n#26 0x7f7132b1ba34 __clone\n\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"ce4258572bddcca3","name":"stdout","source":"ce4258572bddcca3.txt","type":"text/plain","size":966}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"host","value":"fv-az1771-943"},{"name":"thread","value":"2687-MainThread"},{"name":"framework","value":"pytest-bdd"},{"name":"language","value":"cpython3"},{"name":"feature","value":"Test each council output matches expected results"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"council","value":"SouthKestevenDistrictCouncil"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":4},"items":[{"uid":"f4781ec527fc8180","reportUrl":"https://Nextures.github.io/UKBinCollectionData/3.12/3//#testresult/f4781ec527fc8180","status":"failed","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome-headless-shell=127.0.6533.72)\nStacktrace:\n#0 0x56007e2836ba <unknown>\n#1 0x56007df53730 <unknown>\n#2 0x56007df4b761 <unknown>\n#3 0x56007df3b8f9 <unknown>\n#4 0x56007df3d684 <unknown>\n#5 0x56007df3bbc5 <unknown>\n#6 0x56007df3b426 <unknown>\n#7 0x56007df3b31e <unknown>\n#8 0x56007df3964c <unknown>\n#9 0x56007df399ca <unknown>\n#10 0x56007df56051 <unknown>\n#11 0x56007dfe4cc5 <unknown>\n#12 0x56007dfc5a52 <unknown>\n#13 0x56007dfe41ca <unknown>\n#14 0x56007dfc57f3 <unknown>\n#15 0x56007df95ec9 <unknown>\n#16 0x56007df9691e <unknown>\n#17 0x56007e2499eb <unknown>\n#18 0x56007e24d972 <unknown>\n#19 0x56007e236e15 <unknown>\n#20 0x56007e24e502 <unknown>\n#21 0x56007e21bd2f <unknown>\n#22 0x56007e272578 <unknown>\n#23 0x56007e272750 <unknown>\n#24 0x56007e28248c <unknown>\n#25 0x7f924c343a94 <unknown>\n#26 0x7f924c3d0a34 __clone","time":{"start":1722989210660,"stop":1722989366161,"duration":155501}},{"uid":"a17bd363b57d5b8e","reportUrl":"https://Nextures.github.io/UKBinCollectionData/3.12/2//#testresult/a17bd363b57d5b8e","status":"failed","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome-headless-shell=127.0.6533.72)\nStacktrace:\n#0 0x55b418bce6ba <unknown>\n#1 0x55b41889e730 <unknown>\n#2 0x55b418896761 <unknown>\n#3 0x55b4188868f9 <unknown>\n#4 0x55b418888684 <unknown>\n#5 0x55b418886bc5 <unknown>\n#6 0x55b418886426 <unknown>\n#7 0x55b41888631e <unknown>\n#8 0x55b41888464c <unknown>\n#9 0x55b4188849ca <unknown>\n#10 0x55b4188a1051 <unknown>\n#11 0x55b41892fcc5 <unknown>\n#12 0x55b418910a52 <unknown>\n#13 0x55b41892f1ca <unknown>\n#14 0x55b4189107f3 <unknown>\n#15 0x55b4188e0ec9 <unknown>\n#16 0x55b4188e191e <unknown>\n#17 0x55b418b949eb <unknown>\n#18 0x55b418b98972 <unknown>\n#19 0x55b418b81e15 <unknown>\n#20 0x55b418b99502 <unknown>\n#21 0x55b418b66d2f <unknown>\n#22 0x55b418bbd578 <unknown>\n#23 0x55b418bbd750 <unknown>\n#24 0x55b418bcd48c <unknown>\n#25 0x7feee13bea94 <unknown>\n#26 0x7feee144ba34 __clone","time":{"start":1722986530917,"stop":1722986799448,"duration":268531}},{"uid":"7b6eb3af7c66e101","reportUrl":"https://Nextures.github.io/UKBinCollectionData/3.12/1//#testresult/7b6eb3af7c66e101","status":"failed","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: chrome-headless-shell=127.0.6533.72)\nStacktrace:\n#0 0x55b39b6fb6ba <unknown>\n#1 0x55b39b3cb730 <unknown>\n#2 0x55b39b3c3761 <unknown>\n#3 0x55b39b3b38f9 <unknown>\n#4 0x55b39b3b5684 <unknown>\n#5 0x55b39b3b3bc5 <unknown>\n#6 0x55b39b3b3426 <unknown>\n#7 0x55b39b3b331e <unknown>\n#8 0x55b39b3b164c <unknown>\n#9 0x55b39b3b19ca <unknown>\n#10 0x55b39b3ce051 <unknown>\n#11 0x55b39b45ccc5 <unknown>\n#12 0x55b39b43da52 <unknown>\n#13 0x55b39b45c1ca <unknown>\n#14 0x55b39b43d7f3 <unknown>\n#15 0x55b39b40dec9 <unknown>\n#16 0x55b39b40e91e <unknown>\n#17 0x55b39b6c19eb <unknown>\n#18 0x55b39b6c5972 <unknown>\n#19 0x55b39b6aee15 <unknown>\n#20 0x55b39b6c6502 <unknown>\n#21 0x55b39b693d2f <unknown>\n#22 0x55b39b6ea578 <unknown>\n#23 0x55b39b6ea750 <unknown>\n#24 0x55b39b6fa48c <unknown>\n#25 0x7f17807d4a94 <unknown>\n#26 0x7f1780861a34 __clone","time":{"start":1722956994562,"stop":1722957138177,"duration":143615}}]},"tags":[]},"source":"964d3df5f5e76232.json","parameterValues":["SouthKestevenDistrictCouncil"]}